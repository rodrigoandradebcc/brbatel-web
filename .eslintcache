[{"D:\\Dev\\ProjetosParalelos\\brbatel\\brbatel-web\\src\\pages\\Dashboard\\styles.tsx":"1","D:\\Dev\\ProjetosParalelos\\brbatel\\brbatel-web\\src\\pages\\Dashboard\\index.tsx":"2","D:\\Dev\\ProjetosParalelos\\brbatel\\brbatel-web\\src\\components\\Input\\styles.ts":"3","D:\\Dev\\ProjetosParalelos\\brbatel\\brbatel-web\\src\\components\\ModalAddProduct\\index.tsx":"4","D:\\Dev\\ProjetosParalelos\\brbatel\\brbatel-web\\src\\components\\Modal\\index.tsx":"5","D:\\Dev\\ProjetosParalelos\\brbatel\\brbatel-web\\src\\components\\ModalAddProduct\\styles.ts":"6","D:\\Dev\\ProjetosParalelos\\brbatel\\brbatel-web\\src\\components\\Input\\index.tsx":"7","D:\\Dev\\ProjetosParalelos\\brbatel\\brbatel-web\\src\\services\\api.ts":"8"},{"size":2103,"mtime":1610950679131,"results":"9","hashOfConfig":"10"},{"size":5366,"mtime":1610949188340,"results":"11","hashOfConfig":"10"},{"size":834,"mtime":1610937456380,"results":"12","hashOfConfig":"10"},{"size":2347,"mtime":1610949756947,"results":"13","hashOfConfig":"10"},{"size":1067,"mtime":1610927939051,"results":"14","hashOfConfig":"10"},{"size":1313,"mtime":1610937345831,"results":"15","hashOfConfig":"10"},{"size":1352,"mtime":1610929667592,"results":"16","hashOfConfig":"10"},{"size":116,"mtime":1610861361205,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1t468ox",{"filePath":"20","messages":"21","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Dev\\ProjetosParalelos\\brbatel\\brbatel-web\\src\\pages\\Dashboard\\styles.tsx",["35"],"D:\\Dev\\ProjetosParalelos\\brbatel\\brbatel-web\\src\\pages\\Dashboard\\index.tsx",["36","37","38"],"import React, { useEffect, useState } from 'react';\nimport { FiPlus, FiMinus, FiChevronRight } from 'react-icons/fi';\nimport { isAfter, isBefore, isEqual } from 'date-fns';\nimport api from '../../services/api';\nimport ModalAddProduct from '../../components/ModalAddProduct';\n\nimport {\n  Container,\n  LogoText,\n  Header,\n  Footer,\n  Content,\n  Section,\n  MainContent,\n  Table,\n  H2,\n  Button,\n  Separador,\n} from './styles';\n\ninterface IProduct {\n  id?: string;\n  name: string;\n  current_quantity: number;\n  minimum_quantity: number;\n  cost: number;\n  resale_price: number;\n  created_at?: Date | undefined;\n}\n\ninterface IProductResponse {\n  id?: string;\n  name: string;\n  current_quantity: number;\n  minimum_quantity: number;\n  cost: number;\n  resale_price: number;\n  created_at: Date;\n}\n\nconst Dashboard: React.FC = () => {\n  const [products, setProducts] = useState<IProduct[]>([]);\n  const [modalOpen, setModalOpen] = useState(false);\n  //\n\n  useEffect(() => {\n    const loadData = async () => {\n      const { data } = await api.get<IProductResponse[]>('/products');\n      const productsOrderByDate = (\n        a: IProductResponse,\n        b: IProductResponse,\n      ) => {\n        return new Date(a.created_at) < new Date(b.created_at) ? -1 : 1;\n      };\n\n      setProducts(data.sort(productsOrderByDate));\n\n      // console.log(productsOrderByDate);\n    };\n    loadData();\n  }, []);\n\n  async function handleAddProduct(product: IProduct): Promise<void> {\n    try {\n      const response = await api.post('/products', {\n        ...product,\n      });\n\n      setProducts([...products, response.data]);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const handlePlusQuantity = async (product: IProduct) => {\n    try {\n      const { data: responseData } = await api.patch<IProductResponse>(\n        `products/${product.id}`,\n        {\n          new_quantity: product.current_quantity + 1,\n        },\n      );\n\n      const findIndexProduct = products.findIndex(\n        prod => prod.id === responseData.id,\n      );\n      if (findIndexProduct >= 0) {\n        const newProducts = products.fill(\n          responseData,\n          findIndexProduct,\n          findIndexProduct + 1,\n        );\n        setProducts([...newProducts]);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleReduceQuantity = async (product: IProduct) => {\n    const { data: responseData } = await api.patch<IProductResponse>(\n      `products/${product.id}`,\n      {\n        new_quantity: product.current_quantity - 1,\n      },\n    );\n\n    if (product.current_quantity !== 0) {\n      const findIndexProduct = products.findIndex(\n        prod => prod.id === responseData.id,\n      );\n      if (findIndexProduct >= 0) {\n        const newProducts = products.fill(\n          responseData,\n          findIndexProduct,\n          findIndexProduct + 1,\n        );\n        setProducts([...newProducts]);\n      }\n    }\n  };\n\n  function toggleModal(): void {\n    setModalOpen(!modalOpen);\n  }\n\n  return (\n    <Container>\n      <Content>\n        <ModalAddProduct\n          isOpen={modalOpen}\n          setIsOpen={toggleModal}\n          handleAddProduct={handleAddProduct}\n        />\n        <Header>\n          <LogoText>br.batel$</LogoText>\n        </Header>\n\n        <MainContent>\n          <Section>\n            <Separador>\n              <H2>\n                <FiChevronRight size={16} />\n                Estoque\n              </H2>\n\n              <Button\n                type=\"button\"\n                onClick={() => {\n                  toggleModal();\n                }}\n              >\n                Adicionar Produto\n              </Button>\n            </Separador>\n\n            <Table>\n              <thead>\n                <tr>\n                  <th>Nome</th>\n                  <th>Quantidade atual</th>\n                  <th>Quantidade mínima</th>\n                  {/* <th>Custo</th> */}\n                  <th>Preço de Venda</th>\n                  <th>Ações</th>\n                </tr>\n              </thead>\n              <tbody>\n                {products &&\n                  products.map(product => (\n                    <tr>\n                      <td>{product.name}</td>\n                      <td>{product.current_quantity}</td>\n                      <td>{product.minimum_quantity}</td>\n                      {/* <td>{`R$ ${product.cost}`}</td> */}\n                      <td className=\"money\">{`R$ ${product.resale_price}`}</td>\n                      <td>\n                        <button\n                          type=\"button\"\n                          onClick={() => {\n                            handlePlusQuantity(product);\n                          }}\n                        >\n                          <FiPlus />\n                        </button>\n                        <button\n                          type=\"button\"\n                          onClick={() => {\n                            handleReduceQuantity(product);\n                          }}\n                        >\n                          <FiMinus />\n                        </button>\n                      </td>\n                    </tr>\n                  ))}\n              </tbody>\n            </Table>\n          </Section>\n        </MainContent>\n\n        <Footer>\n          <p>br.batel$</p>\n        </Footer>\n      </Content>\n    </Container>\n  );\n};\n\nexport default Dashboard;\n","D:\\Dev\\ProjetosParalelos\\brbatel\\brbatel-web\\src\\components\\Input\\styles.ts",[],"D:\\Dev\\ProjetosParalelos\\brbatel\\brbatel-web\\src\\components\\ModalAddProduct\\index.tsx",[],"D:\\Dev\\ProjetosParalelos\\brbatel\\brbatel-web\\src\\components\\Modal\\index.tsx",["39"],"D:\\Dev\\ProjetosParalelos\\brbatel\\brbatel-web\\src\\components\\ModalAddProduct\\styles.ts",[],"D:\\Dev\\ProjetosParalelos\\brbatel\\brbatel-web\\src\\components\\Input\\index.tsx",[],"D:\\Dev\\ProjetosParalelos\\brbatel\\brbatel-web\\src\\services\\api.ts",[],{"ruleId":"40","severity":1,"message":"41","line":3,"column":7,"nodeType":"42","messageId":"43","endLine":3,"endColumn":15},{"ruleId":"40","severity":1,"message":"44","line":3,"column":10,"nodeType":"42","messageId":"43","endLine":3,"endColumn":17},{"ruleId":"40","severity":1,"message":"45","line":3,"column":19,"nodeType":"42","messageId":"43","endLine":3,"endColumn":27},{"ruleId":"40","severity":1,"message":"46","line":3,"column":29,"nodeType":"42","messageId":"43","endLine":3,"endColumn":36},{"ruleId":"47","severity":1,"message":"48","line":6,"column":13,"nodeType":"49","messageId":"50","endLine":6,"endColumn":16,"suggestions":"51"},"@typescript-eslint/no-unused-vars","'vermelho' is assigned a value but never used.","Identifier","unusedVar","'isAfter' is defined but never used.","'isBefore' is defined but never used.","'isEqual' is defined but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["52","53"],{"messageId":"54","fix":"55","desc":"56"},{"messageId":"57","fix":"58","desc":"59"},"suggestUnknown",{"range":"60","text":"61"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"60","text":"62"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[128,131],"unknown","never"]